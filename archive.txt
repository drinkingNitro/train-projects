# Lagranzh

from math import sqrt


def isQua(n, i, ans):
    m = int(sqrt(n))
    if n == m ** 2:
        ans[i] = m
        return ans
    else:
        ans[i] = m
        i += 1
        if i == 4:
            return ans
        isQua(n - m ** 2, i, ans)
        return ans


def check_up(array):
    c_summ = 0
    for j in range(len(array)):
        c_summ += array[j] ** 2
    return c_summ


def resolve(k, arr, n):
    global rans
    rans = None
    while arr[k] > 1 and arr[k] > arr[k + 1]:
        arr[k] -= 1
        # (difference to a) leaks into k + 1
        arr = isQua(n - check_up(arr[:k + 1]), k + 1, arr[:k + 1] \
        + (3 - k) * [0])
        if check_up(arr) == n:
            rans = arr.copy()
            break
        if k < 2 and rans is None:  # resolve for k + 1 while ans[k] is fixed
            resolve(k + 1, arr, n)
    if rans is None:
        resolve(k - 1, arr, n)


a = int(input())
ans = isQua(a, 0, [0, 0, 0, 0])

if check_up(ans) != a:
    resolve(2, ans, a)
    ans = rans

for i in range(len(ans)):
    if ans[i] != 0:
        print(ans[i], end=' ')
    i += 1


for r in range(8193,10001,1):
    a = r
    ans = isQua(a, 0, [0, 0, 0, 0])

    if check_up(ans) != a:
        resolve(2, ans, a)
        ans = rans
    print(r)
    r += 1


# Cubes

def isCube(n, i, ans):
    m = int(n ** (1. / 3.))
    if n == m ** 3:
        ans[i] = m
        return ans
    else:
        ans[i] = m
        i += 1
        if i == 7:
            return ans
        isCube(n - m ** 3, i, ans)
        return ans


def check_up(array):
    c_summ = 0
    for j in range(len(array)):
        c_summ += array[j] ** 3
    return c_summ


def resolve(k, arr, n):
    global rans
    rans = None
    while arr[k] > 1 and arr[k] > arr[k + 1]:
        arr[k] -= 1
        # (difference to a) leaks into k + 1
        arr = isCube(n - check_up(arr[:k + 1]), k + 1,
                     arr[:k + 1] + (6 - k) * [0])
        if check_up(arr) == n:
            rans = arr.copy()
            break
        if k < 2 and rans is None:  # resolve for k + 1 while ans[k] is fixed
            resolve(k + 1, arr, n)
    if rans is None:
        if k > 0:
            resolve(k - 1, arr, n)
        else:
            rans = [0]


a = int(input())
ans = isCube(a, 0, 7 * [0])

if check_up(ans) != a:
    resolve(5, ans, a)
    ans = rans

for i in range(len(ans)):
    if ans[i] != 0:
        print(ans[i] ** 3, end=' ')
    else:
        print(0)
    i += 1




a = input().split()
a = list(map(int, a))
n_min1 = n_min2 = n_max1 = n_max2 = n_max3 =\
p_min1 = p_min2 = p_max1 = p_max2 = p_max3 = 0

for i in range(len(a)):
    if a[i] < 0:
        if a[i] < n_min1:
            n_min2 = n_min1
            n_min1 = a[i]
        elif a[i] < n_min2:
            n_min2 = a[i]
        
        if a[i] > n_max3:
            n_max1 = n_max2
            n_max2 = n_max3
            n_max3 = a[i]
        elif a[i] > n_max2:
            n_max1 = n_max2
            n_max2 = a[i]
        elif a[i] > n_max1:
            n_max1 = a[i]
    elif a[i] > 0:
        if a[i] < p_min1:
            p_min2 = p_min1
            p_min1 = a[i]
        elif a[i] < p_min2:
            p_min2 = a[i]

        if a[i] > p_max3:
            p_max1 = p_max2
            p_max2 = p_max3
            p_max3 = a[i]
        elif a[i] > p_max2:
            p_max1 = p_max2
            p_max2 = a[i]
        elif a[i] > p_max1:
            p_max1 = a[i]

ans1 = p_max1 * p_max2 * p_max3
ans2 = n_max1 * n_max2 * n_max3
ans3 = n_min1 * n_min2 * p_max3
ans4 = n_max1 * p_min1 * p_min2

if ans1 != 0 and ans1 >= ans2 and ans1 >= ans3 and ans1 >= ans4:
    print(p_max1, p_max2, p_max3)
elif ans2 != 0 and ans2 >= ans3 and ans2 >= ans1 and ans2 >= ans4:
    print(n_max1, n_max2, n_max3)
elif ans3 != 0 and ans3 >= ans1 and ans3 >= ans2 and ans3 >= ans4:
    print(n_min1, n_min2, p_max3)
elif ans4 != 0 and ans4 >= ans3 and ans4 >= ans1 and ans4 >= ans2:
    print(n_max1, p_min1, p_min2)



n = int(input())
nl = list(map(int, input().split()))
m = int(input())
ml = list(map(int, input().split()))

cities = []
shelters = []
dx = []
ans = []

for i in range(n):
    cities.append((nl[i], i + 1))
cities.sort()

for j in range(m):
    shelters.append((ml[j], j + 1))
shelters.sort()

js = 0

for i in range(len(cities)):
    for j in range(js, len(shelters)):
        dx.append(cities[i][0] - shelters[j][0])
        if len(dx) > 1:
            if abs(dx[-1]) > abs(dx[-2]):
                ans.append((cities[i][1], shelters[j - 1][1]))
                dx.clear()
                js = j - 1
                break
            elif j == len(shelters) - 1:
                ans.append((cities[i][1], shelters[j][1]))
                dx.clear()
                js = j
        elif len(shelters) - js == 1:
            ans.append((cities[i][1], shelters[j][1]))
            dx.clear()
            js = j

ans.sort()
for pair in ans:
    print(pair[1], end=' ')


***

fin = open('input.txt', 'r', encoding='utf8')
lines = fin.readlines()
list = []
for line in lines:
    k = line.split()
    list.append((str(k[0]), str(k[1]), str(k[3])))
list.sort()

for abits in range(len(list)):
    print(*list[abits])


***

for i in range(1, 16):
    name = 'высоты-5.'+ str(i) + '.txt'
    files = open(name, 'w', encoding='utf8')
    print(5 * '0\n', file=files)
    files.close()

***

file = open('input.txt', 'r', encoding='utf8')
abits = []
stat = []
counts = []
quant = []
bestat = []
for line in file:
    abits.append(line.split())


def SortbyColumn(inputStr):
    return int(inputStr[2])


abits.sort(key=SortbyColumn)
for person in abits:
    stat.append(int(person[3]))
    quant.append(person[2])


for i in range(9, 12):
    counts.append(quant.count(str(i)))

bestat.append(max(stat[:counts[0]]))
bestat.append(max(stat[counts[0]:counts[1] + counts[0]]))
bestat.append(max(stat[counts[1] + counts[0]:]))

print(*bestat)

file.close()


***


with open('input.txt', 'r', encoding='utf-8') as file:
    lines = file.readlines()

K = int(lines[0])
grads = []
points = []
abits = []
res_abits = []

for line in lines[1:]:
    grads.append(line.split())

for grad in grads:
    if int(grad[-1]) >= 40 and int(grad[-2]) >= 40 and int(grad[-3]) >= 40:
        points.append(int(grad[-3]) + int(grad[-2]) + int(grad[-1]))

points.sort(reverse=True)

if len(points) <= K:
    print(0)
elif points[0] == points[K]:
    print(1)
elif K == 1:
    print(points[0])
elif points[K - 1] > points[K]:
    print(points[K - 1])
else:
    i = points.index(points[K - 1])
    print(points[i - 1])

***


nines, tens, elevens = [], [], []

with open('input.txt', 'r', encoding='utf-8') as file:
    for row in file:
        pupil = grade, point = int(row.split()[-2]), int(row.split()[-1])
        if grade == 9:
            nines.append(point)
        elif grade == 10:
            tens.append(point)
        else:
            elevens.append(point)

for list in (nines, tens, elevens):
    m = max(list)
    loosers = []
    for i in list:
        if len(list) == 1:
            loosers.append(0)
        elif i < m:
            loosers.append(i)
    print(max(loosers), end=' ')


***


rows = []

with open('input.txt', 'r', encoding='utf-8') as file:
    for row in file:
        rows.append(row.strip())

party_list = []

for party in range(1, rows.index('VOTES:')):
    party_list.append(rows[party])

vote_list = []

for vote in range(rows.index('VOTES:') + 1, len(rows)):
    vote_list.append(rows[vote])

vote_count = []
sum_vote = len(vote_list)
party_vote_list = []

for i in party_list:
    count = vote_list.count(i)
    party_vote_list.append([i, count])


def SortFunc(row):
    return row[1]


party_vote_list.sort()
party_vote_list.sort(key=SortFunc, reverse=True)

for party in party_vote_list:
    print(party[0])



***



import sys

file = sys.stdin.read().split()

days, parties = map(int, file[0:2])
all_dates = {0}

for party in range(parties):
    start, interval = int(file[2 + 2 * party]), int(file[3 + 2 * party])
    dates = set(range(start, days + 1, interval))
    all_dates |= dates

weekends = set(range(6, days + 1, 7)) | set(range(7, days + 1, 7)) | {0}

all_dates -= weekends

print(len(all_dates))



***



import sys
words = sys.stdin.read().split()
word_frequences = {}

for word in words:
    if word not in word_frequences:
        word_frequences[word] = 0
    word_frequences[word] += 1

wordlist, freqlist = [], []


def Sortbyfreq(tup):
    return tup[1]


sorted_wf = sorted(word_frequences.items())
sorted_wf = sorted(sorted_wf, reverse=True, key=Sortbyfreq)

for word in sorted_wf:
    print(word[0])



***



import sys

file = sys.stdin.read().splitlines()


def Deposit(name, summ):
    if name not in accounts:
        accounts[name] = 0
    accounts[name] += summ


def Withdraw(name, summ):
    if name not in accounts:
        accounts[name] = 0
    accounts[name] -= summ


def Income(percent):
    for account in accounts:
        if accounts[account] > 0:
            indexed = accounts[account] * (1 + percent / 100)
            accounts[account] = int(indexed)


def Transfer(name, name2, summ):
    if name not in accounts:
        accounts[name] = 0
    if name2 not in accounts:
        accounts[name2] = 0
    accounts[name] -= summ
    accounts[name2] += summ


def Balance(name):
    if name not in accounts:
        print('ERROR')
    else:
        print(accounts[name])


accounts = {}
for command in file:
    command = command.split()
    operation = command[0]

    if operation == 'DEPOSIT':
        Deposit(command[1], int(command[2]))
    elif operation == 'WITHDRAW':
        Withdraw(command[1], int(command[2]))
    elif operation == 'INCOME':
        Income(int(command[1]))
    elif operation == 'TRANSFER':
        Transfer(command[1], command[2], int(command[3]))
    elif operation == 'BALANCE':
        Balance(command[1])



***



import sys

file = sys.stdin.read().splitlines()
N = int(file[0])
tree = {}
persons = set()
parents = set()

for line in file[1:]:
    person, parent = line.split()
    tree.update({person: parent})

persons = list(tree.keys())
parents = list(tree.values())
primal = list(set(parents) - set(persons))
rang = {}
rang.update({primal[0]: 0})
r = 1
new_primal = []

while len(rang) < N:
    for i in range(len(parents)):
        if parents[i] in primal:
            rang.update({persons[i]: r})
            new_primal.append(persons[i])
        if i == len(parents) - 1:
            r += 1
            primal = new_primal
            new_primal = []

for name in sorted(list(rang.items())):
    print(*name)



***



import itertools as iter

print(
    '\n'.join(
        list(
            map(
                lambda lis: ''.join(
                    list(
                        map(
                            str,
                            lis
                        )
                    )
                ),
                iter.permutations(
                    range(
                        1,
                        int(
                            input()
                        ) + 1
                    )
                )
            )
        )
    )
)



***


import functools as func
import sys

print(
    *map(
        lambda z: func.reduce(
            lambda x, y: abs(x - y),
            z
        ),
        zip(
            *map(
                lambda line: map(
                    int,
                    line.split()
                ),
                sys.stdin.readlines()[1:]
            )
        )
    )
)



***



from math import sqrt

print(
    *filter(
        lambda num: 0 not in (
            map(
                lambda d: num % d,
                range(
                    2,
                    int(
                        sqrt(num)
                    ) + 1
                )
            )
        ),
        range(
            2,
            int(
                input()
            ) + 1
        )
    )
)



***



